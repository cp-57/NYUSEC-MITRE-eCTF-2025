"""
Author: Ben Janis
Date: 2025

This source file is part of an example system for MITRE's 2025 Embedded System CTF
(eCTF). This code is being provided only for educational purposes for the 2025 MITRE
eCTF competition, and may not meet MITRE standards for quality. Use this code at your
own risk!

Copyright: Copyright (c) 2025 The MITRE Corporation
"""

import argparse
import struct
import json
from wolfcrypt.ciphers import Aes
import os


class Encoder:
    def __init__(self, secrets: bytes):
        """
        You **may not** change the arguments or returns of this function!

        :param secrets: Contents of the secrets file generated by
            ectf25_design.gen_secrets
        """
        # Load the json of the secrets file
        secrets = json.loads(secrets)
        
        # Extract encryption keys from secrets
        self.aes_key = bytes.fromhex(secrets["aes_key"])
        self.channel_keys = {
            int(ch): bytes.fromhex(key) 
            for ch, key in secrets["channel_keys"].items()
        }
        
        # Initialize AES cipher
        self.aes = Aes(self.aes_key, Aes.CBC)

    def encode(self, channel: int, frame: bytes, timestamp: int) -> bytes:
        """The frame encoder function

        This will be called for every frame that needs to be encoded before being
        transmitted by the satellite to all listening TVs

        You **may not** change the arguments or returns of this function!

        :param channel: 16b unsigned channel number. Channel 0 is the emergency
            broadcast that must be decodable by all channels.
        :param frame: Frame to encode. Max frame size is 64 bytes.
        :param timestamp: 64b timestamp to use for encoding. **NOTE**: This value may
            have no relation to the current timestamp, so you should not compare it
            against the current time. The timestamp is guaranteed to strictly
            monotonically increase (always go up) with subsequent calls to encode

        :returns: The encoded frame, which will be sent to the Decoder
        """
    
        # Get channel-specific key
        channel_key = self.channel_keys.get(channel, self.channel_keys[0])
        
        # Generate random IV
        iv = os.urandom(16)
        
        # Encrypt frame data
        self.aes.iv = iv
        padded_frame = self._pad_data(frame)
        encrypted_frame = self.aes.encrypt(padded_frame)
        
        # Maintain original return format but with encrypted frame
        return struct.pack("<IQ", channel, timestamp) + iv + encrypted_frame
    
    def _pad_data(self, data: bytes) -> bytes:
        """Add PKCS7 padding to ensure block alignment"""
        pad_len = 16 - (len(data) % 16)
        return data + bytes([pad_len] * pad_len)

            


def main():
    """A test main to one-shot encode a frame

    This function is only for your convenience and will not be used in the final design.

    After pip-installing, you should be able to call this with:
        python3 -m ectf25_design.encoder path/to/test.secrets 1 "frame to encode" 100
    """
    parser = argparse.ArgumentParser(prog="ectf25_design.encoder")
    parser.add_argument(
        "secrets_file", type=argparse.FileType("rb"), help="Path to the secrets file"
    )
    parser.add_argument("channel", type=int, help="Channel to encode for")
    parser.add_argument("frame", help="Contents of the frame")
    parser.add_argument("timestamp", type=int, help="64b timestamp to use")
    args = parser.parse_args()

    encoder = Encoder(args.secrets_file.read())
    print(repr(encoder.encode(args.channel, args.frame.encode(), args.timestamp)))


if __name__ == "__main__":
    main()
